/**
 * routes.test.js
 *
 * Unit‑level checks that:
 * 1. every available year gets a static page (no 404)
 * 2. every year/region combo that has events returns a non‑404 response
 *    from the filters route AND contains a “decent” amount of events.
 *
 * Run with: pnpm test
 */

import {
  getAvailableYears,
  getAvailableRegions,
  getEventsByYear,
} from '../data/eventsUnified'

// The two dynamic route files we need to interrogate
import { getStaticPaths as getYearPaths } from '../pages/eventos-tech-[year].js'
import {
  getStaticProps as getFiltersProps,
} from '../pages/[...filters].js'

describe('Route availability & data sanity', () => {
  const years = getAvailableYears()
  const regions = getAvailableRegions()

  /** Ensure every year with data is pre‑generated by Next.js */
  test('getStaticPaths includes all available years', () => {
    const { paths } = getYearPaths()
    const generatedYears = paths.map((p) => p.params.year)

    years.forEach((y) => {
      expect(generatedYears).toContain(y)
    })
  })

  /** Check each year/region combo that has events */
  test('filters route serves all valid year/region combos with enough data', async () => {
    const MIN_EVENTS = 3 // “decent amount” threshold

    for (const y of years) {
      for (const r of regions) {
        const eventsForCombo = getEventsByYear(y).filter(
          (e) => r === 'all' || e.region.toLowerCase() === r.toLowerCase()
        )

        // Skip combos that genuinely have no events in the dataset
        if (eventsForCombo.length === 0) continue

        // 1️⃣ Data volume check
        expect(eventsForCombo.length).toBeGreaterThanOrEqual(MIN_EVENTS)

        // 2️⃣ Route existence check (should NOT return notFound)
        const res = await getFiltersProps({
          params: { filters: [y, r] },
        })
        expect(res.notFound).not.toBe(true)
      }
    }
  })
})